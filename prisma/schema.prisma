generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

model Account {
  id                String  @id @default(uuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId])
}

model Session {
  id           String   @id @default(uuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model User {
  id            String        @id @default(uuid())
  name          String?
  email         String?       @unique
  emailVerified DateTime?
  image         String?
  role          Role          @default(USER)
  subscription  Subscription  @default(FREE)
  settings      UserSettings?
  accounts      Account[]
  sessions      Session[]
  filaments     Filament[]
  billing       Billing?
}

model UserSettings {
  user             User      @relation(fields: [userId], references: [id])
  userId           String    @unique
  weight_threshold String    @default("50")
  auto_archive     Boolean   @default(false)
  updatedAt        DateTime? @updatedAt
}

model Billing {
  id        String    @id @default(uuid())
  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String    @unique
  phone     String
  country   String
  address   String
  city      String
  zip       String
  state     String
  createdAt DateTime? @default(now())
  updatedAt DateTime? @updatedAt
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Manufacturer {
  id        String     @id @default(uuid())
  name      String?    @unique
  createdAt DateTime?  @default(now())
  updatedAt DateTime?  @updatedAt
  filaments Filament[]
}

model Color {
  id        String     @id @default(uuid())
  name      String?    @unique
  createdAt DateTime?  @default(now())
  updatedAt DateTime?  @updatedAt
  filaments Filament[]
}

model Material {
  id        String     @id @default(uuid())
  name      String?    @unique
  createdAt DateTime?  @default(now())
  updatedAt DateTime?  @updatedAt
  filaments Filament[]
}

model Tag {
  id        String     @id @default(uuid())
  name      String?    @unique
  filaments Filament[]
}

model Filament {
  id              String       @id @default(uuid())
  user            User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId          String
  status          String       @default("NEW")
  diameter        Int
  manufacturer    Manufacturer @relation(fields: [manufacturerId], references: [id], onDelete: Cascade)
  manufacturerId  String
  material        Material     @relation(fields: [materialId], references: [id])
  materialId      String
  color           Color        @relation(fields: [colorId], references: [id])
  colorId         String
  weight          Float
  remainingWeight Float
  isFavorite      Boolean      @default(false)
  createdAt       DateTime     @default(now())
  updatedAt       DateTime?    @updatedAt
  tags            Tag[]

  @@index([manufacturerId])
  @@index([materialId])
  @@index([colorId])
  @@index([userId])
}

enum Role {
  USER
  ADMIN
}

enum Subscription {
  FREE
  BASIC
  PREMIUM
}
